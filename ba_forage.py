# -*- coding: utf-8 -*-
"""BA_forage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rYC6L13gYCK9DJ5mOJ4XeFmSB7cRWjay

# Task 1

---

## Web scraping and analysis

This Jupyter notebook includes some code to get you started with web scraping. We will use a package called `BeautifulSoup` to collect the data from the web. Once you've collected your data and saved it into a local `.csv` file you should start with your analysis.

### Scraping data from Skytrax

If you visit [https://www.airlinequality.com] you can see that there is a lot of data there. For this task, we are only interested in reviews related to British Airways and the Airline itself.

If you navigate to this link: [https://www.airlinequality.com/airline-reviews/british-airways] you will see this data. Now, we can use `Python` and `BeautifulSoup` to collect all the links to the reviews and then to collect the text data on each of the individual review links.
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

base_url = "https://www.airlinequality.com/airline-reviews/british-airways"
pages = 10
page_size = 100

reviews = []
ground_star=[]
value_for=[]
recommended_list=[]
rating_list=[]
flown_dest=[]

# for i in range(1, pages + 1):
for i in range(1, pages + 1):

    print(f"Scraping page {i}")

    # Create URL to collect links from paginated data
    url = f"{base_url}/page/{i}/?sortby=post_date%3ADesc&pagesize={page_size}"

    # Collect HTML data from this page
    response = requests.get(url)

    # Parse content
    content = response.content
    parsed_content = BeautifulSoup(content, 'html.parser')
    for para in parsed_content.find_all("div", {"class": "text_content"}):
        reviews.append(para.get_text())

    ratings_rows=parsed_content.find_all('tr')
    for row in ratings_rows:
        # Check if the row contains the Ground Service rating
        if row.find('td', class_='review-rating-header ground_service'):
            # Find the stars for the 'Ground Service' rating in this specific row
            rating_stars = row.find('td', class_='review-rating-stars stars')

            # Count the number of filled stars (those with the 'fill' class)
            filled_stars = len(rating_stars.find_all('span', class_='star fill'))

            ground_star.append(filled_stars)
    for row in ratings_rows:
        # Check if the row contains the Ground Service rating
        if row.find('td', class_='review-rating-header value_for_money'):
            # Find the stars for the 'Ground Service' rating in this specific row
            rating_stars1 = row.find('td', class_='review-rating-stars stars')

            # Count the number of filled stars (those with the 'fill' class)
            filled_stars1 = len(rating_stars1.find_all('span', class_='star fill'))

            value_for.append(filled_stars1)

    for row in ratings_rows:
    # Check if the row contains the 'Recommended' rating
      if row.find('td', class_='review-rating-header recommended'):
          # Find the corresponding value in the same row
          rating_value = row.find('td', class_='review-value rating-yes')

          # Extract and store the text ('yes' in this case)
          if rating_value:
              recommended_list.append(rating_value.get_text(strip=True))
          else:
            recommended_list.append('No')


    for row in ratings_rows:
        # Find the span with itemprop="ratingValue"
        if row.find('td',class_='review-rating-header route'):
          rating_value = row.find('td', class_='review-value')
        if rating_value:
            # Find the corresponding value in the same row
        #   dest=row.find('td',class_='review-value')
        # # Extract and store the rating if found
        # if dest:
          a91=rating_value.get_text(strip=True)
          if a91 not in flown_dest:
            flown_dest.append(a91)
          #flown_dest.append(rating_value.get_text(strip=True))

    ratings_rows1 = parsed_content.find_all('div', class_='rating-10')


    for row in ratings_rows1:
        # Find the span with itemprop="ratingValue"
        rating_value = row.find('span', itemprop='ratingValue')

        # Extract and store the rating if found
        if rating_value:
            rating_list.append(rating_value.get_text(strip=True))






    print(f"   ---> {len(reviews)} total reviews")

len(flown_dest)

df = pd.DataFrame()
df["reviews"] = reviews
print(len(ground_star))
df["ground_star"]=pd.NA
df.loc[:len(ground_star)-1, "ground_star"] = ground_star
print(len(value_for))
df['value_for']=value_for
df["ground_star"].value_counts()
print(len(recommended_list))
df['recommended']=recommended_list
print(len(rating_list[:1000]))
df['ratings']=rating_list[1:1001]
df["flight_path"]=pd.NA
df.loc[:len(flown_dest)-1, "flight_path"] = flown_dest
df.head(15)

df.to_csv("BA_reviews.csv")

"""Congratulations! Now you have your dataset for this task! The loops above collected 1000 reviews by iterating through the paginated pages on the website. However, if you want to collect more data, try increasing the number of pages!

 The next thing that you should do is clean this data to remove any unnecessary text from each of the rows. For example, "✅ Trip Verified" can be removed from each row if it exists, as it's not relevant to what we want to investigate.
"""

url1 = "https://www.airlinequality.com/airline-reviews/british-airways/page/2/?sortby=post_date%3ADesc&pagesize=10"
response1 = requests.get(url1)

    # Parse content
content1 = response1.content
parsed_content1 = BeautifulSoup(content1, 'html.parser')
print(content1)

print(parsed_content1)

# Find the stars for the 'Ground Service' rating
rating_stars = parsed_content1.find('td', class_='review-rating-stars stars')

# Count the number of filled stars (those with the 'fill' class)
filled_stars = len(rating_stars.find_all('span', class_='star fill'))

# Print the rating
print(f"Ground Service Rating: {filled_stars} stars")

reviews1=parsed_content1.find_all('tr')
for review1 in reviews1:
    # Find the review rating stars in the current review
    rating_stars = review1.find('td', class_='review-rating-stars stars')

    # Check if rating_stars is found to avoid errors
    if rating_stars:
        # Count the number of filled stars (those with the 'fill' class)
        filled_stars = len(rating_stars.find_all('span', class_='star fill'))

        # Print the rating for the current review
        print(f"Rating: {filled_stars} stars")
    else:
        print("No rating found for this review.")

# Sample HTML snippet
html_content = '''
<tr>
    <td class="review-rating-header seat_comfort">Seat Comfort</td>
    <td class="review-rating-stars stars">
        <span class="star fill">1</span>
        <span class="star fill">2</span>
        <span class="star">3</span>
        <span class="star">4</span>
        <span class="star">5</span>
    </td>
</tr>
<tr><td class="review-rating-header recommended">Recommended</td><td class="review-value rating-yes">yes</td></tr> </table>
'''

# Parse the HTML
soup = BeautifulSoup(html_content, 'html.parser')

# Find the container with stars
stars_container = soup.find('td', class_='review-rating-stars stars')

# Count the number of filled stars
filled_stars = (stars_container.find_all('span', class_='star fill'))
print(stars_container)
print(filled_stars)
print(len(filled_stars))

rating = soup.find('td', class_='review-value')

# Extract and print the text
print(rating.get_text(strip=True))
print(f"Rating: {filled_stars}")

ratings_rows=parsed_content1.find_all('tr')
for row in ratings_rows:
    # Check if the row contains the Ground Service rating
    if row.find('td', class_='review-rating-header ground_service'):
        # Find the stars for the 'Ground Service' rating in this specific row
        rating_stars = row.find('td', class_='review-rating-stars stars')

        # Count the number of filled stars (those with the 'fill' class)
        filled_stars = len(rating_stars.find_all('span', class_='star fill'))

        # Print the rating for the current review
        print(f"Ground Service Rating: {filled_stars} stars")

a91="✅ Trip Verified | The seats were"
print(a91.split(' | ')[1])

reviews_new=[]
for i in df.reviews:
  #print(i)
  #print(i.split('|')[1])
  reviews_new.append(i.split('|')[1])
  #df['reviews_new']=i.split('|')[1]
df['reviews_new']=reviews_new

df.head()

print(df.loc[999,'reviews'])

from textblob import TextBlob

text =df.loc[0,'reviews_new']

# Perform sentiment analysis
blob = TextBlob(text)
sentiment_score = blob.sentiment.polarity  # Range: -1 (negative) to +1 (positive)

print(f"Sentiment Score: {sentiment_score}")

from transformers import pipeline

# Load sentiment analysis pipeline
sentiment_pipeline = pipeline("sentiment-analysis")

#text = "I am really happy with the product! Best purchase ever."

# Get sentiment

result1 = sentiment_pipeline(text)
a90=result1[0]['label']
print(a90)
# print(result['label'])

for i in range(1000):
  res=TextBlob(df.loc[i,'reviews_new'])
  if res.sentiment.polarity>0:
    df.loc[i,'sentiment']='positive'
  elif res.sentiment.polarity<0:
    df.loc[i,'sentiment']='negative'
  # res=sentiment_pipeline(df.loc[i,'reviews_new'])
  # df.loc[i,'sentiment']=res[0]['label']
  # df.loc[i,'sentiment_score']=res[0]['score']

df.head()

print(len(df.loc[2,'reviews_new']))

df['sentiment'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns
plt.plot(df['ratings'].value_counts(),'+')
print(df['ratings'].value_counts())

df1=df.copy()
df.head()

df1.drop(columns=['reviews'],inplace=True)
df1.head()

source=[]
dest=[]
for i in df1.flight_path.iloc[:646]:
  print(i)
  #print(i.split('to',1))
  source.append(i.split('to')[0])
  dest.append(i.rsplit(' ', 1)[-1])
  #dest.append(i.split('to',1)[1])
  #df['reviews_new']=i.split('|')[1]
source

ab9=['London ', ' New York']
print(ab9[1])
ab3='Mumbai to London'
print(ab3.rsplit(' ', 1)[-1])

df1['source']=pd.NA
df1.loc[:len(source)-1, 'source']=source
df1.head()

df1["destination"]=pd.NA
df1.loc[:len(dest)-1, 'destination']=dest
df1.head()

df1.to_csv("BA_reviews.csv")

